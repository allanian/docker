---
- name: INSTALL | Install package
  package:
    name: "{{ packages }}"
    state: present
  vars:
    packages: 
      - nano
      - policycoreutils-python
      - ebtables 
      - ethtool
      - etcd
      - bash-completion 
      - bash-completion-extras
  when: kubernetes_repo is success
  environment: "{{ item | default(omit) }}"
  with_items: "{{ proxy_env }}"

- name: INSTALL | delete old version
  package:
    name: "{{item}}"
    state: absent
  with_items:
  - kubectl
  - kubelet
  - kubernetes-cni
  - kubeadm 

- name: INSTALL | Install KUBE packages
  package:
    name: "{{ packages }}"
    state: present
  vars:
    packages: 
      - nano
      - net-tools
      - policycoreutils-python
      - "kubelet-{{ kube_version }}"
      - "kubeadm-{{ kube_version }}"
      - "kubectl-{{ kube_version }}"
      - ebtables 
      - ethtool
      - etcd
  when: kubernetes_repo is success
  environment: "{{item}}"
  with_items: "{{proxy_env}}"
  notify:
    - restart docker
    - restart kubelet

- name: INSTALL | flush_handlers
  meta: flush_handlers

- name: INSTALL | Check for existence of kubelet environment file.
  stat:
    path: '{{ kubelet_environment_file_path }}'
  register: kubelet_environment_file

- name: INSTALL | Set facts for KUBELET_EXTRA_ARGS task if environment file exists.
  set_fact:
    kubelet_args_path: '{{ kubelet_environment_file_path }}'
    kubelet_args_line: "{{ 'KUBELET_EXTRA_ARGS=' + kube_kubelet_extra_args }}"
    kubelet_args_regexp: '^KUBELET_EXTRA_ARGS='
  when: kubelet_environment_file.stat.exists

- name: INSTALL | Set facts for KUBELET_EXTRA_ARGS task if environment file doesn't exist.
  set_fact:
    kubelet_args_path: '/etc/systemd/system/kubelet.service.d/10-kubeadm.conf'
    kubelet_args_line: "{{ 'Environment=\"KUBELET_EXTRA_ARGS=' + kube_kubelet_extra_args + '\"' }}"
    kubelet_args_regexp: '^Environment='
  when: kubelet_environment_file.stat.exists == false

- name: INSTALL | Configure KUBELET_EXTRA_ARGS.
  lineinfile:
    path: '{{ kubelet_args_path }}'
    line: '{{ kubelet_args_line }}'
    regexp: '{{ kubelet_args_regexp }}'
    state: present
  register: kubelet_config_file

- name: INSTALL | Ensure kubelet
  systemd:
    name: "kubelet"
    state: "restarted"
    daemon_reload: true
    enabled: true
  when: kubelet_config_file is changed

- name: INSTALL | Install package on master server
  package:
    name: "kubectl"
    state: present
  when: (ansible_default_ipv4.address == item.ip and item.name == 'master')
#  environment: "{{item}}"
#  with_items: "{{proxy_env}}"
  with_items: "{{ entries }}"
  notify:
    - restart kubelet

- name: REMOVE | flush_handlers
  meta: flush_handlers
