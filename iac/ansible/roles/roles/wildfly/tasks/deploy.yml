---

- name: DEPLOY copy tar on remote server
  copy:
    src: "{{ item }}"
    dest: "/tmp/{{ item }}"
    mode: u+rw,g-wx,o-rwx
  with_items:
  - "{{ project_tar }}"

- name: DEPLOY get the username running the deploy
  local_action: command whoami
  register: username_on_the_host
  become: false

- name: DEPLOY Extract tar in the install directory
  unarchive:
    copy: no
    src: "/tmp/{{ project_tar }}"
    dest: "/home/{{ username_on_the_host.stdout }}"


- name: DEPLOY copy build.gradle on remote server
  copy: src={{ item.src }} dest={{ item.dest }}
  with_items:
    - { src: 'build.gradle-main', dest: '/home/{{ username_on_the_host.stdout }}/{{ project_folder }}/build.gradle' }
#    - { src: 'build.gradle-config', dest: '/home/{{ username_on_the_host.stdout }}/{{ project_folder }}/config-server/build.gradle' }
#    - { src: 'build.gradle-discovery', dest: '/home/{{ username_on_the_host.stdout }}/{{ project_folder }}/discovery-server/build.gradle' }
#    - { src: 'build.gradle-gateway', dest: '/home/{{ username_on_the_host.stdout }}/{{ project_folder }}/gateway-server/build.gradle' }
#    - { src: 'build.gradle-admin', dest: '/home/{{ username_on_the_host.stdout }}/{{ project_folder }}/admin-service/build.gradle' }
#    - { src: 'build.gradle-auth', dest: '/home/{{ username_on_the_host.stdout }}/{{ project_folder }}/auth-service/build.gradle' }
#    - { src: 'build.gradle-device', dest: '/home/{{ username_on_the_host.stdout }}/{{ project_folder }}/device-service/build.gradle' }
#    - { src: 'build.gradle-file', dest: '/home/{{ username_on_the_host.stdout }}/{{ project_folder }}/file-service/build.gradle' }
#    - { src: 'build.gradle-geo', dest: '/home/{{ username_on_the_host.stdout }}/{{ project_folder }}/geo-service/build.gradle' }
#    - { src: 'build.gradle-geo', dest: '/home/{{ username_on_the_host.stdout }}/{{ project_folder }}/log-service/build.gradle' }
#    - { src: 'build.gradle-notification', dest: '/home/{{ username_on_the_host.stdout }}/{{ project_folder }}/notification-service/build.gradle' }
#    - { src: 'build.gradle-statistic', dest: '/home/{{ username_on_the_host.stdout }}/{{ project_folder }}/statistic-service/build.gradle' }
#    - { src: 'build.gradle-task', dest: '/home/{{ username_on_the_host.stdout }}/{{ project_folder }}/task-service/build.gradle' }

#- name: gradle build
#  shell: "export PATH=$PATH:{{gradle_home}} && gradle build"
#  args:
#    chdir: "/home/{{ username_on_the_host.stdout }}/{{ project_folder }}"

#- name: gradle muleapp - copy all .war to bin
#  shell: "export PATH=$PATH:{{gradle_home}} && gradle muleapp"
#  args:
#    chdir: "/home/{{ username_on_the_host.stdout }}/{{ project_folder }}"

#- name: copy war for deploy on first server
#  copy: 
#    src: "{{ item }}" 
#    dest: "{{wildfly_home_path}}/standalone/deployments/"
#    remote_src: yes
#  with_items:
#    - '/home/{{ username_on_the_host.stdout }}/{{ project_folder }}/bin/config-server-0.0.1.war'
#    - '/home/{{ username_on_the_host.stdout }}/{{ project_folder }}/bin/discovery-server-0.0.1.war'
#    - '/home/{{ username_on_the_host.stdout }}/{{ project_folder }}/bin/gateway-server-0.0.1.war'
#  when: (ansible_default_ipv4.address == groups['SUUMU_SERVER'][0])

#- name: copy all files to folder
#  command: cp -r /home/{{ username_on_the_host.stdout }}/{{ project_folder }}/config-repo /home/{{ item.name }}/config-repo
#  with_items: "{{ wildfly_management_users }}"
#  when: (ansible_default_ipv4.address == groups['SUUMU_SERVER'][0])

#- name: Find all files, exclude on second server
#  find:
#    paths: '/home/{{ username_on_the_host.stdout }}/{{ project_folder }}/bin'
#    patterns:
#    - "*.war"
#    file_type: "file"
#    excludes: 'config-server-0.0.1.war,discovery-server-0.0.1.war,gateway-server-0.0.1.war'
#  register: target_files

#- name: copy files to other place on second server
#  copy:
#    src: "{{ item.path }}"
#    dest: "{{wildfly_home_path}}/standalone/deployments/"
#    remote_src: yes
#  with_items: "{{ target_files.files }}"
#  when: (ansible_default_ipv4.address == groups['SUUMU_SERVER'][1])
