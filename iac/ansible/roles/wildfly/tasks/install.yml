---
- name: Install package and etc.
  package:
    name: "{{ packages }}"
    state: present
  vars:
    packages:
    - java-1.8.0-openjdk.x86_64
    - java-1.8.0-openjdk-devel.x86_64
    - wget
    - nano
    - git
  when: wildfly_repo is success
  environment: "{{item}}"
  with_items: "{{proxy_env}}"
  
- name: Create wildfly_group exists
  group:
    name: "{{ wildfly_group }}"
    state: present

- name: Create wildfly_user
  user:
    name: "{{ wildfly_user }}"
    password: "{{ wildfly_password }}"
    groups:
    - "{{ wildfly_group }}"
    append: yes
    state: present
    shell: /bin/bash   # Defaults to /bin/bash
    system: no
    createhome: yes
    home: /home/{{ wildfly_user }}
  ignore_errors: yes

- name: Check if service is running
  command: "systemctl status wildfly.service"
  ignore_errors: yes
  changed_when: false
#  no_log: True
  register: service_wildfly_status
  
- name: Check installed version
  command: >
    {{wildfly_home_path}}/bin/jboss-cli.sh -c --commands=":read-attribute(name=product-version)"
    --controller="{{wildfly_bind}}":9990 --user={{ wildfly_management_users.0.name }} --password={{wildfly_management_users.0.password}}
  register: wildfly_check
  changed_when: false
  no_log: True
  when: service_wildfly_status is success
  ignore_errors: true

- name: Download WildFly binaries
  get_url:
    url: "{{ wildfly_url }}"
    dest: "/tmp/{{ wildfly_package }}"
  when: |
      "Loaded: not-found" in service_wildfly_status.stdout or
      "wildfly.service could not be found" in service_wildfly_status.stderr or
      (service_wildfly_status is success and
      (wildfly_check is failed or item not in wildfly_check.stdout))
  with_items:
  - "{{wildfly_version}}"

- name: Extract wildfly in the install directory
  unarchive:
    copy: no
    src: "/tmp/{{ wildfly_package }}"
    dest: "{{ wildfly_install_path }}"
    owner: "{{ wildfly_user }}"
    group: "{{ wildfly_group }}"
  when: |
      "Loaded: not-found" in service_wildfly_status.stdout or
      "service could not be found" in service_wildfly_status.stderr or
      (service_wildfly_status is success and
      (wildfly_check is failed or item not in wildfly_check.stdout))
  with_items:
  - "{{wildfly_version}}"

- name: Move wildfly
  command: 'mv "{{ wildfly_install_path }}/{{ wildfly_package_name }}" "{{ wildfly_install_path }}/wildfly"'
  when: |
      "Loaded: not-found" in service_wildfly_status.stdout or
      "service could not be found" in service_wildfly_status.stderr or
      (service_wildfly_status is success and
      (wildfly_check is failed or item not in wildfly_check.stdout))
  with_items:
  - "{{wildfly_version}}"
 
- name: Create log path
  file:
    path: "{{ wildfly_log_file_path }}"
    state: directory
    owner: "{{ wildfly_user }}"
    group: "{{ wildfly_group }}"
